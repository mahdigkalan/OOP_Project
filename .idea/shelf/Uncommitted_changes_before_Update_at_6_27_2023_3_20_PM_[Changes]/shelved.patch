Index: src/Functions/Functions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Functions;\r\nimport Classes.*;\r\nimport java.io.*;\r\nimport java.util.Scanner;\r\n\r\npublic class Functions {\r\n    public static Scanner scanner = new Scanner(System.in) ;\r\n    public static void checkPassword(String password,String Role,String userName,StaticArrayLists staticArrayLists){\r\n        boolean numberic = false ;\r\n        boolean capitalLetter = false ;\r\n        boolean smallLetter = false ;\r\n        int passwordLength = password.length() ;\r\n        for (int i = 0 ; i < password.length() ; i++){\r\n            int asciiCode = (int) (password.charAt(i)) ;\r\n            if (asciiCode < 57 && asciiCode > 48){\r\n                numberic = true ;\r\n            }\r\n        }\r\n        for (int i = 0 ; i < password.length() ; i++){\r\n            int asciiCode = (int) (password.charAt(i)) ;\r\n            if (asciiCode < 90 && asciiCode > 65){\r\n                capitalLetter = true ;\r\n            }\r\n        }\r\n        for (int i = 0 ; i < password.length() ; i++){\r\n            int asciiCode = (int) (password.charAt(i)) ;\r\n            if (asciiCode < 122 && asciiCode > 97){\r\n                smallLetter = true ;\r\n            }\r\n        }\r\n        if (!numberic){\r\n            System.out.println(\"Passowrd must have at least one number!\");\r\n        }\r\n        if (!capitalLetter){\r\n            System.out.println(\"Password must have at least one capital letter!\");\r\n        }\r\n        if (!smallLetter){\r\n            System.out.println(\"Password must have at least one small letter!\");\r\n        }\r\n        if (passwordLength < 8){\r\n            System.out.println(\"Password must have at least 8 charecter!\");\r\n        }\r\n        if (numberic && capitalLetter && smallLetter && passwordLength >= 8){\r\n            if (Role.equals(\"ADMIN\")){\r\n                if (isUserNameUnique(userName,Role,staticArrayLists)){\r\n                    Admin admin = new Admin(userName,password,setID(\"admin\",staticArrayLists)) ;\r\n                    staticArrayLists.adminStaticArrayList.add(admin) ;\r\n                    System.out.println(\"Account created successfully\");\r\n                    makeSecurityQuestion(admin);\r\n                }else {\r\n                    System.out.println(\"An Admin exist with this username!\");\r\n                }\r\n            }else if (Role.equals(\"USER\")){\r\n                if (isUserNameUnique(userName,Role,staticArrayLists)){\r\n                    User user = new User(userName,password,setID(\"user\",staticArrayLists)) ;\r\n                    staticArrayLists.userStaticArrayList.add(user) ;\r\n                    System.out.println(\"Account created successfully\");\r\n                    makeSecurityQuestion(user);\r\n                }else {\r\n                    System.out.println(\"A User exist with this username!\");\r\n                }\r\n            }else if (Role.equals(\"DELIVERY\")){\r\n                if (isUserNameUnique(userName,Role,staticArrayLists)){\r\n                    Delivery delivery = new Delivery(userName,password,setID(\"delivery\",staticArrayLists)) ;\r\n                    staticArrayLists.deliveriesArraylist.add(delivery) ;\r\n                    System.out.println(\"Account created successfully\");\r\n                    makeSecurityQuestion(delivery);\r\n                }else {\r\n                    System.out.println(\"A Delivery exist with this username!\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n    public static void LogIn(String password,String Role,String userName,StaticArrayLists staticArrayLists){\r\n        if (Role.equals(\"ADMIN\")){\r\n            if (isUserNameUnique(userName,Role,staticArrayLists)){\r\n                System.out.println(\"This username does not exist!\");\r\n            }else {\r\n                Admin admin = staticArrayLists.adminStaticArrayList.get(findRoleIndex(userName,Role,staticArrayLists)) ;\r\n                if (admin.getPassword().equals(password)){\r\n                    Classes.Role.loggedInRole = admin ;\r\n                    Classes.Role.loggedInRoleExistance = true ;\r\n                    System.out.println(\"you are logged in as ADMIN!\");\r\n                    if (admin.adminRestaurants.size() == 1){\r\n                        Restaurant.loggedInRestaurantForAdmin = admin.adminRestaurants.get(0) ;\r\n                    }else {\r\n                        showRestaurantList(admin);\r\n                    }\r\n                }else {\r\n                    System.out.println(\"password is incorrect!\");\r\n                }\r\n            }\r\n        }else if (Role.equals(\"USER\")){\r\n            if (isUserNameUnique(userName,Role,staticArrayLists)){\r\n                System.out.println(\"This username does not exist!\");\r\n            }else {\r\n                User user = staticArrayLists.userStaticArrayList.get(findRoleIndex(userName,Role,staticArrayLists)) ;\r\n                if (user.getPassword().equals(password)){\r\n                    Classes.Role.loggedInRole = user ;\r\n                    Classes.Role.loggedInRoleExistance = true ;\r\n                    System.out.println(\"you are logged in as USER!\");\r\n                    Functions.showAllAvailableRestaurants(staticArrayLists);\r\n                }else {\r\n                    System.out.println(\"password is incorrect!\");\r\n                }\r\n            }\r\n        }else if (Role.equals(\"DELIVERY\")){\r\n            if (isUserNameUnique(userName,Role,staticArrayLists)){\r\n                System.out.println(\"This username does not exist!\");\r\n            }else {\r\n                Delivery delivery = staticArrayLists.deliveriesArraylist.get(findRoleIndex(userName,Role,staticArrayLists)) ;\r\n                if (delivery.getPassword().equals(password)){\r\n                    Classes.Role.loggedInRole = delivery ;\r\n                    Classes.Role.loggedInRoleExistance = true ;\r\n                    System.out.println(\"you are logged in as DELIVERY!\");\r\n                }else {\r\n                    System.out.println(\"password is incorrect!\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n    public static boolean isUserNameUnique(String UserName,String Role,StaticArrayLists staticArrayLists){\r\n        boolean isUserNameUnique = true ;\r\n        if (Role.equals(\"ADMIN\")){\r\n            for (int i = 0 ; i < staticArrayLists.adminStaticArrayList.size() ; i++){\r\n                if (staticArrayLists.adminStaticArrayList.get(i).getUserName().equals(UserName)){\r\n                    isUserNameUnique = false ;\r\n                }\r\n            }\r\n        }else if (Role.equals(\"USER\")){\r\n            for (int i = 0 ; i < staticArrayLists.userStaticArrayList.size() ; i++){\r\n                if (staticArrayLists.userStaticArrayList.get(i).getUserName().equals(UserName)){\r\n                    isUserNameUnique = false ;\r\n                }\r\n            }\r\n        }else if (Role.equals(\"DELIVERY\")){\r\n            for (int i = 0 ; i < staticArrayLists.deliveriesArraylist.size() ; i++){\r\n                if (staticArrayLists.deliveriesArraylist.get(i).getUserName().equals(UserName)){\r\n                    isUserNameUnique = false ;\r\n                }\r\n            }\r\n        }\r\n        return isUserNameUnique ;\r\n    }\r\n    public static int findRoleIndex(String userName,String Role,StaticArrayLists staticArrayLists){\r\n        int index = 0 ;\r\n        if (Role.equals(\"ADMIN\")){\r\n            for (int i = 0 ; i < staticArrayLists.adminStaticArrayList.size() ; i++){\r\n                if (staticArrayLists.adminStaticArrayList.get(i).getUserName().equals(userName)){\r\n                    index = i ;\r\n                }\r\n            }\r\n        }else if (Role.equals(\"USER\")){\r\n            for (int i = 0 ; i < staticArrayLists.userStaticArrayList.size() ; i++){\r\n                if (staticArrayLists.userStaticArrayList.get(i).getUserName().equals(userName)){\r\n                    index = i ;\r\n                }\r\n            }\r\n        }else if (Role.equals(\"DELIVERY\")){\r\n            for (int i = 0 ; i < staticArrayLists.deliveriesArraylist.size() ; i++){\r\n                if (staticArrayLists.deliveriesArraylist.get(i).getUserName().equals(userName)){\r\n                    index = i ;\r\n                }\r\n            }\r\n        }\r\n        return index ;\r\n    }\r\n    public static void ForgetPassword(String Role,String userName,StaticArrayLists staticArrayLists){\r\n        if (Role.equals(\"ADMIN\")){\r\n            Admin admin = staticArrayLists.adminStaticArrayList.get(findRoleIndex(userName,Role,staticArrayLists)) ;\r\n            System.out.println(\"please answer following question to reset your password : \");\r\n            System.out.println(admin.securityQuestion);\r\n            String answer = scanner.nextLine() ;\r\n            if (answer.equals(admin.getSecurityQuestionAnswer())){\r\n                System.out.println(\"enter your new password : \");\r\n                String password = scanner.nextLine() ;\r\n                admin.setPassword(password);\r\n            }else{\r\n                System.out.println(\"your answer is incorrect!\");\r\n            }\r\n        }else {\r\n            User user = staticArrayLists.userStaticArrayList.get(findRoleIndex(userName,Role,staticArrayLists)) ;\r\n            System.out.println(\"please answer following question to reset your password : \");\r\n            System.out.println(user.securityQuestion);\r\n            String answer = scanner.nextLine() ;\r\n            if (answer.equals(user.getSecurityQuestionAnswer())){\r\n                System.out.println(\"enter your new password : \");\r\n                String password = scanner.nextLine() ;\r\n                user.setPassword(password);\r\n            }else{\r\n                System.out.println(\"your answer is incorrect!\");\r\n            }\r\n        }\r\n    }\r\n    public static void makeSecurityQuestion(Role role){\r\n        System.out.println(\"now please answer this security question for when you forget your password : \");\r\n        double randomNumber = (Math.random()) * 5 ;\r\n        int randomInt = (int) randomNumber ;\r\n        String Question = new String(\"\");\r\n        String Answer ;\r\n        if (randomInt==0){\r\n            Question = new String(\"What is your favourite color ? : \") ;\r\n        }else if (randomInt==1){\r\n            Question = new String(\"What is your favourite food ? : \") ;\r\n        }else if (randomInt==2){\r\n            Question = new String(\"What is your favourite soccer team ? : \") ;\r\n        }else if (randomInt==3){\r\n            Question = new String(\"What is your favourite actor/actress ? : \") ;\r\n        }else if (randomInt==4){\r\n            Question = new String(\"What is your favourite movie ? : \") ;\r\n        }\r\n        System.out.println(Question);\r\n        role.securityQuestion = new String(Question) ;\r\n        String answer = scanner.nextLine() ;\r\n        role.setSecurityQuestionAnswer(answer);\r\n    }\r\n    public static void searchRestaurant(Admin admin,String ID){\r\n        boolean restaurantExistance = false ;\r\n        for (int i = 0 ; i < admin.adminRestaurants.size() ; i++){\r\n            if (admin.adminRestaurants.get(i).restaurantID.equals(ID)){\r\n                restaurantExistance = true ;\r\n                Restaurant.loggedInRestaurantForAdmin = admin.adminRestaurants.get(i) ;\r\n            }\r\n        }\r\n        if (restaurantExistance == false){\r\n            System.out.println(\"There is no Restaurant with this ID!\");\r\n        }else {\r\n            System.out.println(\"We are at panel of \"+Restaurant.loggedInRestaurantForAdmin.restaurantName+\" with ID of \"+Restaurant.loggedInRestaurantForAdmin.restaurantID);\r\n        }\r\n    }\r\n    public static void showFoodType(){\r\n        Restaurant restaurant = Restaurant.loggedInRestaurantForAdmin ;\r\n        if (restaurant.restaurantFoodType.size() == 0){\r\n           System.out.println(\"no food type added yet !\");\r\n        }else {\r\n            for (int i = 0 ; i < restaurant.restaurantFoodType.size() ; i++){\r\n                System.out.println( (i+1) +\". \"+restaurant.restaurantFoodType.get(i));\r\n            }\r\n        }\r\n    }\r\n    public static String setID(String thingString,StaticArrayLists staticArrayLists){\r\n        String firstchapter = new String(\"\") ;\r\n        String ID = new String(\"\") ;\r\n        int counter = 0 ;\r\n        int randomNumber = (int) ( ((Math.random()) * 9999) + 1 ) ;\r\n        if (thingString.equals(\"restaurant\")){\r\n            firstchapter = new String(\"R\") ;\r\n            staticArrayLists.counterIDRestaurant++ ;\r\n            counter = staticArrayLists.counterIDRestaurant ;\r\n        }else if (thingString.equals(\"food\")){\r\n            firstchapter = new String(\"F\") ;\r\n            staticArrayLists.counterIDFood++ ;\r\n            counter = staticArrayLists.counterIDFood ;\r\n        }else if (thingString.equals(\"comment\")){\r\n            firstchapter = new String(\"C\") ;\r\n            staticArrayLists.counterIDComment++ ;\r\n            counter = staticArrayLists.counterIDComment ;\r\n        }else if (thingString.equals(\"order\")){\r\n            firstchapter = new String(\"O\") ;\r\n            staticArrayLists.counterIDOrder++ ;\r\n            counter = staticArrayLists.counterIDOrder ;\r\n        }else if (thingString.equals(\"rating\")){\r\n            firstchapter = new String(\"RA\") ;\r\n            staticArrayLists.counterIDRating++ ;\r\n            counter = staticArrayLists.counterIDRating ;\r\n        }else if (thingString.equals(\"delivery\")){\r\n            firstchapter = new String(\"D\") ;\r\n            staticArrayLists.counterIDDelivery++ ;\r\n            counter = staticArrayLists.counterIDDelivery ;\r\n        }else if (thingString.equals(\"admin\")){\r\n            firstchapter = new String(\"A\") ;\r\n            staticArrayLists.counterIDAdmin++ ;\r\n            counter = staticArrayLists.counterIDAdmin ;\r\n        }else if (thingString.equals(\"user\")){\r\n            firstchapter = new String(\"U\") ;\r\n            staticArrayLists.counterIDUser++ ;\r\n            counter = staticArrayLists.counterIDUser ;\r\n        }\r\n        ID = firstchapter + randomNumber + counter ;\r\n        return ID ;\r\n    }\r\n    public static void showMenuForAdmin(){\r\n        Restaurant restaurant = Restaurant.loggedInRestaurantForAdmin ;\r\n        if (restaurant.restaurantMenu.size() == 0){\r\n            System.out.println(\"No food added to the menu yet!\");\r\n        }else {\r\n            for (int i = 0 ; i < restaurant.restaurantMenu.size() ; i++){\r\n                Food food = restaurant.restaurantMenu.get(i) ;\r\n                System.out.println(\"food name : \"+food.foodName+\" * food id : \"+food.foodID+\" * food cost : \"+food.foodCost+\" * active discount : \"+food.discountActivation+\" * food rate : \"+food.getRating());\r\n            }\r\n        }\r\n    }\r\n    public static void editFood(String foodID,String changingParameters,String newValue){\r\n        Restaurant restaurant = Restaurant.loggedInRestaurantForAdmin ;\r\n        int index = 0 ;\r\n        for (int i = 0 ; i < restaurant.restaurantMenu.size() ; i++){\r\n            if (foodID.equals(restaurant.restaurantMenu.get(i).foodID)){\r\n                index = i ;\r\n                //food = restaurant.restaurantMenu.get(i) ;\r\n            }\r\n        }\r\n        if (changingParameters.equals(\"NAME\")){\r\n            restaurant.restaurantMenu.get(index).foodName = newValue ;\r\n            System.out.println(\"new name sat for food with id of : \"+foodID);\r\n        }else if (changingParameters.equals(\"PRICE\")){\r\n            restaurant.restaurantMenu.get(index).foodCost = Integer.parseInt(newValue) ;\r\n            System.out.println(\"new price sat for food with id of : \"+foodID);\r\n        }else if (changingParameters.equals(\"DISCOUNT\")){\r\n            if (restaurant.restaurantMenu.get(index).discountActivation){\r\n                restaurant.restaurantMenu.get(index).discountActivation = false ;\r\n            }else {\r\n                restaurant.restaurantMenu.get(index).discountActivation = true ;\r\n                if (Integer.parseInt(newValue) <= 50 && Integer.parseInt(newValue) > 0){\r\n                    restaurant.restaurantMenu.get(index).discountValue = Integer.parseInt(newValue) ;\r\n                }else {\r\n                    System.out.println(\"discount value must be less than 50 percent and positive !\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n    public static void addFood(String foodName,int foodCost,StaticArrayLists staticArrayLists){\r\n        Restaurant restaurant = Restaurant.loggedInRestaurantForAdmin ;\r\n        boolean foodExistance = false ;\r\n        for (int i = 0 ; i < restaurant.restaurantMenu.size() ; i++){\r\n            if (foodName.equals(restaurant.restaurantMenu.get(i).foodName)){\r\n                foodExistance = true ;\r\n            }\r\n        }\r\n        if (foodExistance){\r\n            System.out.println(\"sorry a food exist with this name in the menu ! \");\r\n        }else {\r\n            Food food = new Food(foodName,foodCost) ;\r\n            food.foodID = setID(\"food\",staticArrayLists) ;\r\n            restaurant.restaurantMenu.add(food) ;\r\n            staticArrayLists.allFoodsArrayList.add(food) ;\r\n            System.out.println(\"food added to menu successfully!\");\r\n        }\r\n    }\r\n    public static void showRestaurantList(Admin admin){\r\n        if (admin.adminRestaurants.size() == 0){\r\n            System.out.println(\"there is no restaurant in the list!\");\r\n        }else {\r\n            for (int i = 0 ; i < admin.adminRestaurants.size() ; i++){\r\n                Restaurant restaurant = admin.adminRestaurants.get(i) ;\r\n                System.out.println(\"Restaurant Name : \"+restaurant.restaurantName+\" , Restaurant ID : \"+restaurant.restaurantID) ;\r\n            }\r\n        }\r\n    }\r\n    public static void deleteFood(String foodID,StaticArrayLists staticArrayLists){\r\n        Restaurant restaurant = Restaurant.loggedInRestaurantForAdmin ;\r\n        boolean foodIDExistance = false , foodExistanceRestaurant = false;\r\n        int foodIndexFood = 0 , foodIndexRestaurant = 0 ;\r\n        for (int i = 0 ; i < staticArrayLists.allFoodsArrayList.size() ; i++){\r\n            if (staticArrayLists.allFoodsArrayList.get(i).foodID.equals(foodID)){\r\n                foodIDExistance = true ;\r\n                foodIndexFood = i ;\r\n            }\r\n        }\r\n        for (int i = 0 ; i < restaurant.restaurantMenu.size() ; i++){\r\n            if (restaurant.restaurantMenu.get(i).foodID.equals(foodID)){\r\n                foodExistanceRestaurant = true ;\r\n                foodIndexRestaurant = i ;\r\n            }\r\n        }\r\n        if (foodIDExistance){\r\n            if (foodExistanceRestaurant){\r\n                staticArrayLists.allFoodsArrayList.remove(foodIndexFood) ;\r\n                restaurant.restaurantMenu.remove(foodIndexRestaurant) ;\r\n                System.out.println(\"Food deleted successfully!\");\r\n            }else {\r\n                System.out.println(\"This food ID does't exist in this Restaurant!\");\r\n            }\r\n        }else {\r\n            System.out.println(\"This food ID does't exist!\");\r\n        }\r\n    }\r\n    public static void deactiveFood(String foodID){\r\n        Restaurant restaurant = Restaurant.loggedInRestaurantForAdmin ;\r\n        boolean foodIDExistance = foodIDExistanceChecker(restaurant,foodID) ;\r\n        if (foodIDExistance){\r\n            Food food = foodIDfounder(restaurant,foodID) ;\r\n            if(food.possibilityOfOrdering){\r\n                if (food.activeOrder){\r\n                    System.out.println(\"You can't deactive a food when it has active order!\");\r\n                }else {\r\n                    System.out.println(\"Are you sure you want to deactive this food ?\");\r\n                    String answer = scanner.nextLine() ;\r\n                    if (answer.toLowerCase().equals(\"yes\")){\r\n                        food.possibilityOfOrdering = false ;\r\n                        System.out.println(\"food deactived successfully!\");\r\n                    }\r\n                }\r\n            }else {\r\n                System.out.println(\"food has been deactive!\");\r\n            }\r\n\r\n        }else {\r\n            System.out.println(\"this foodID doesn't exist in this restaurant!\");\r\n        }\r\n    }\r\n    public static void activeFood(String foodID){\r\n        Restaurant restaurant = Restaurant.loggedInRestaurantForAdmin ;\r\n        boolean foodIDExistance = foodIDExistanceChecker(restaurant,foodID) ;\r\n        if (foodIDExistance){\r\n            Food food = foodIDfounder(restaurant,foodID) ;\r\n            if(food.possibilityOfOrdering){\r\n                System.out.println(\"food has been active!\");\r\n            }else {\r\n                System.out.println(\"Are you sure you want to active this food ? (yes or no) \");\r\n                String answer = scanner.nextLine() ;\r\n                if (answer.toLowerCase().equals(\"yes\")){\r\n                    food.possibilityOfOrdering = true ;\r\n                    System.out.println(\"food actived successfully!\");\r\n                }\r\n            }\r\n        }else {\r\n            System.out.println(\"this foodID doesn't exist in this restaurant!\");\r\n        }\r\n    }\r\n    public static void discountFood(String foodID,int discountPercent,int timestampHour){\r\n        Restaurant restaurant = Restaurant.loggedInRestaurantForAdmin ;\r\n        boolean foodIDExistance = foodIDExistanceChecker(restaurant,foodID) ;\r\n        if (foodIDExistance){\r\n            Food food = foodIDfounder(restaurant,foodID) ;\r\n            if(food.discountActivation){\r\n                System.out.println(\"You can't add another discount to the food when it has an active discount!\");\r\n            }else {\r\n                if (discountPercent <= 50){\r\n                    food.discountActivation = true ;\r\n                    food.discountValue = discountPercent ;\r\n                    food.discountTimeStampHour = timestampHour ;\r\n                    System.out.println(\"discount for food with id of : \"+foodID+\" actived.\");\r\n                }else {\r\n                    System.out.println(\"You can't a discount with more than half of food cost!\");\r\n                }\r\n            }\r\n        }else {\r\n            System.out.println(\"this foodID doesn't exist in this restaurant!\");\r\n        }\r\n    }\r\n    public static boolean foodIDExistanceChecker(Restaurant restaurant,String foodID){\r\n        boolean foodIDExistance = false ;\r\n        for (int i = 0 ; i < restaurant.restaurantMenu.size() ; i++){\r\n            if (foodID.equals(restaurant.restaurantMenu.get(i).foodID)){\r\n                foodIDExistance = true ;\r\n            }\r\n        }\r\n        return foodIDExistance ;\r\n    }\r\n    public static Food foodIDfounder(Restaurant restaurant,String foodID){\r\n        Food food = restaurant.restaurantMenu.get(0) ;\r\n        for (int i = 0 ; i < restaurant.restaurantMenu.size() ; i++){\r\n            if (foodID.equals(restaurant.restaurantMenu.get(i).foodID)){\r\n                food = restaurant.restaurantMenu.get(i) ;\r\n            }\r\n        }\r\n        return food ;\r\n    }\r\n    public static boolean commentIDExistanceChecker(String commentID){\r\n        Food food = Food.selectedFoodForAdmin ;\r\n        boolean commentExistance = false ;\r\n        for (int i = 0 ; i < food.foodCommentsArrayList.size() ; i++){\r\n            if (commentID.equals(food.foodCommentsArrayList.get(i).commentID)){\r\n                commentExistance = true ;\r\n            }\r\n        }\r\n        return commentExistance ;\r\n    }\r\n    public static Comment commentFounder(String commentID){\r\n        Food food = Food.selectedFoodForAdmin ;\r\n        Comment comment = food.foodCommentsArrayList.get(0) ;\r\n        for (int i = 0 ; i < food.foodCommentsArrayList.size() ; i++){\r\n            if (commentID.equals(food.foodCommentsArrayList.get(i).commentID)){\r\n                comment = food.foodCommentsArrayList.get(i) ;\r\n            }\r\n        }\r\n        return comment ;\r\n    }\r\n    public static void commentResponse(String commentID,String response){\r\n        boolean commentIDExistance = commentIDExistanceChecker(commentID) ;\r\n        if (commentIDExistance){\r\n            Comment comment = commentFounder(commentID) ;\r\n            if (comment.commentResponse.equals(\"\")){\r\n                comment.commentResponse = response ;\r\n                System.out.println(\"your response accepted!\");\r\n            }else {\r\n                System.out.println(\"you have responsed to this comment before!\");\r\n            }\r\n        }else {\r\n            System.out.println(\"This commentID doesn't exist in this food!\");\r\n        }\r\n    }\r\n    public static void displayOpenOrders(){\r\n        Restaurant restaurant = Restaurant.loggedInRestaurantForAdmin ;\r\n        if (restaurant.restaurantOrders.size()==0){\r\n            System.out.println(\"there is no order !\");\r\n        }else {\r\n            for (int i = 0 ; i < restaurant.restaurantOrders.size() ; i++){\r\n                Order order = restaurant.restaurantOrders.get(i) ;\r\n                System.out.print((i+1)+\". \") ;\r\n                for (int j = 0 ; j < order.orderFoods.size() ; j++){\r\n                    System.out.println(\"  \"+order.orderFoods.get(j).foodName+\" * \"+order.orderFoods.get(j).foodID);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    public static void editOrder(String orderID,String parameter,String value){\r\n        Restaurant restaurant = Restaurant.loggedInRestaurantForAdmin ;\r\n        Order order = restaurant.restaurantOrders.get(0) ;\r\n        boolean orderIDExistance = false ;\r\n        for (int i = 0 ; i < restaurant.restaurantOrders.size() ; i++){\r\n            if (orderID.equals(restaurant.restaurantOrders.get(i).orderID)){\r\n                order = restaurant.restaurantOrders.get(i) ;\r\n                orderIDExistance = true ;\r\n            }\r\n        }\r\n        if (orderIDExistance){\r\n            if (parameter.equals(\"STATUS\")){\r\n                if (value.equals(\"COOKING\")){\r\n                    order.orderStatus = STATUS.COOKING ;\r\n                }else if (value.equals(\"SENT\")){\r\n                    order.orderStatus = STATUS.SENT ;\r\n                    int orderIndex = 0 ;\r\n                    for (int i = 0 ; i < restaurant.restaurantOrders.size() ; i++){\r\n                        if (orderID.equals(restaurant.restaurantOrders.get(i).orderID)){\r\n                            orderIndex = i ;\r\n                        }\r\n                    }\r\n                    restaurant.restaurantOrdersHistory.add(order) ;\r\n                    restaurant.restaurantOrders.remove(orderIndex) ;\r\n                }else if (value.equals(\"DELIVERED\")){\r\n                    order.orderStatus = STATUS.DELIVERED ;\r\n                }else if (value.equals(\"READYFORSENDING\")){\r\n                    order.orderStatus = STATUS.READYFORSENDING ;\r\n                    findDelivery();\r\n                }else {\r\n                    System.out.println(\"entered status is not valid!\") ;\r\n                }\r\n            }else if (parameter.equals(\"TIME\")){\r\n                int time = Integer.parseInt(value) ;\r\n                if (time > 0){\r\n                    order.deliveryTimeRemains = time ;\r\n                }else {\r\n                    System.out.println(\"entered time is not valid !\");\r\n                }\r\n            }\r\n        }else {\r\n            System.out.println(\"This id doesn't exist!\");\r\n        }\r\n    }\r\n    public static void showOrderHistory(){\r\n        Restaurant restaurant = Restaurant.loggedInRestaurantForAdmin ;\r\n        if (restaurant.restaurantOrdersHistory.size() == 0){\r\n            System.out.println(\"there is no order in the history !\");\r\n        }else {\r\n            for (int i = 0 ; i < restaurant.restaurantOrdersHistory.size() ; i++){\r\n                Order order = restaurant.restaurantOrdersHistory.get(i) ;\r\n                System.out.print((i+1)+\". \") ;\r\n                for (int j = 0 ; j < order.orderFoods.size() ; j++){\r\n                    System.out.println(\"  \"+order.orderFoods.get(j).foodName+\" * \"+order.orderFoods.get(j).foodID);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    public static void showAllAvailableRestaurants(StaticArrayLists staticArrayLists){\r\n        if (staticArrayLists.allRestaurantsArrayList.size() == 0)\r\n            System.out.println(\"Sorry, There is no available restaurant at this time !!!\");\r\n        else {\r\n            System.out.println(\"Here is the list of available restaurants for you:\");\r\n            for (int i = 0; i < staticArrayLists.allRestaurantsArrayList.size(); i++)\r\n                System.out.println(\"Restaurant \\\"\" + staticArrayLists.allRestaurantsArrayList.get(i).restaurantName + \"\\\" -> with the ID \\\"\" + staticArrayLists.allRestaurantsArrayList.get(i).restaurantID + \"\\\"\");\r\n        }\r\n    }\r\n    public static void ShowRelatedRestaurants (String name,StaticArrayLists staticArrayLists){\r\n        boolean found = false;\r\n        for (int i = 0; i < staticArrayLists.allRestaurantsArrayList.size(); i++)\r\n            if (staticArrayLists.allRestaurantsArrayList.get(i).restaurantName.indexOf(name) != -1)\r\n                found = true;\r\n        if (found) {\r\n            System.out.println(\"Related restaurants with the name \\\"\" + name + \"\\\":\");\r\n            for (int i = 0; i < staticArrayLists.allRestaurantsArrayList.size(); i++)\r\n                if (staticArrayLists.allRestaurantsArrayList.get(i).restaurantName.indexOf(name) != -1)\r\n                    System.out.println(\"Restaurant \\\"\" + staticArrayLists.allRestaurantsArrayList.get(i).restaurantName + \"\\\" -> with the ID \\\"\" + staticArrayLists.allRestaurantsArrayList.get(i).restaurantID + \"\\\" found!\");\r\n        } else\r\n            System.out.println(\"There is no related restaurant with this name !!!\");\r\n    }\r\n    public static void selectRestaurant (String restaurantID,StaticArrayLists staticArrayLists){\r\n        int k = -1;\r\n        for (int i = 0; i < staticArrayLists.allRestaurantsArrayList.size(); i++)\r\n            if (staticArrayLists.allRestaurantsArrayList.get(i).restaurantID.equals(restaurantID))\r\n                k = i;\r\n        if (k != -1) {\r\n            Restaurant.loggedInRestaurantForUser = staticArrayLists.allRestaurantsArrayList.get(k);\r\n            System.out.println(\"Restaurant with the ID \\\"\" + restaurantID + \"\\\" selected!\");\r\n            showMenuForUser(Restaurant.loggedInRestaurantForUser);\r\n        }\r\n        else\r\n            System.out.println(\"There is no related restaurant with this ID !!!\");\r\n\r\n    }\r\n    public static void showMenuForUser(Restaurant restaurant){\r\n        if (restaurant.restaurantMenu.size() == 0)\r\n            System.out.println(\"Sorry, There is no available food for you at this time !!!\");\r\n        else {\r\n            System.out.println(\"Here is the list of foods at this restaurant:\");\r\n            for (int i = 0; i < restaurant.restaurantMenu.size(); i++)\r\n                System.out.println(\"Food \\\"\" + restaurant.restaurantMenu.get(i).foodName + \"\\\" with the ID \\\"\" + restaurant.restaurantMenu.get(i).foodID + \"\\\" and the price \\\"\" + restaurant.restaurantMenu.get(i).foodCost + \"\\\"\");\r\n        }\r\n    }\r\n    public static void ShowRelatedFoods (String name){\r\n        boolean found = false;\r\n        for (int i = 0; i < Restaurant.loggedInRestaurantForUser.restaurantMenu.size(); i++)\r\n            if (Restaurant.loggedInRestaurantForUser.restaurantMenu.get(i).foodName.indexOf(name) != -1)\r\n                found = true;\r\n        if (found) {\r\n            System.out.println(\"Related foods with the name \\\"\" + name + \"\\\":\");\r\n            for (int i = 0; i < Restaurant.loggedInRestaurantForUser.restaurantMenu.size(); i++)\r\n                if (Restaurant.loggedInRestaurantForUser.restaurantMenu.get(i).foodName.indexOf(name) != -1)\r\n                    System.out.println(\"Food \\\"\" + Restaurant.loggedInRestaurantForUser.restaurantMenu.get(i).foodName + \"\\\" -> with the ID \\\"\" + Restaurant.loggedInRestaurantForUser.restaurantMenu.get(i).foodID + \"\\\" found!\");\r\n        } else\r\n            System.out.println(\"There is no related food with this name !!!\");\r\n    }\r\n    public static void selectFood (String foodID){\r\n        int k = -1;\r\n        for (int i = 0; i < Restaurant.loggedInRestaurantForUser.restaurantMenu.size(); i++)\r\n            if (Restaurant.loggedInRestaurantForUser.restaurantMenu.get(i).foodID.equals(foodID))\r\n                k = i;\r\n        if (k != -1) {\r\n            Food.selectedFoodForUser = Restaurant.loggedInRestaurantForUser.restaurantMenu.get(k);\r\n            System.out.println(\"Food with the ID \\\"\" + foodID + \"\\\" selected!\");\r\n        }\r\n        else\r\n            System.out.println(\"There is no related food with this ID !!!\");\r\n    }\r\n    public static void showRestaurantComments (Restaurant restaurant){\r\n        if (restaurant.restaurantCommentsArrayList.size() == 0)\r\n            System.out.println(\"There is no comments about this restaurant!\");\r\n        else {\r\n            System.out.println(\"Comments:\");\r\n            for (int i = 0; i < restaurant.restaurantCommentsArrayList.size(); i++)\r\n                System.out.println(\"\\\"\" + restaurant.restaurantCommentsArrayList.get(i).commentedUser.getUserName() + \"\\\" says: \" + restaurant.restaurantCommentsArrayList.get(i).comment + \" about this restaurant.\");\r\n        }\r\n    }\r\n    public static void getRestaurantComment(Restaurant restaurant,StaticArrayLists staticArrayLists){\r\n        System.out.print(\"Please enter your comment about this restaurant \\\"\" + restaurant.restaurantName + \"\\\": \");\r\n        String comment = scanner.nextLine();\r\n        restaurant.restaurantCommentsArrayList.add(new Comment());\r\n        restaurant.restaurantCommentsArrayList.get(restaurant.restaurantCommentsArrayList.size()-1).comment = comment;\r\n        restaurant.restaurantCommentsArrayList.get(restaurant.restaurantCommentsArrayList.size()-1).commentID = setID(\"comment\",staticArrayLists);\r\n        restaurant.restaurantCommentsArrayList.get(restaurant.restaurantCommentsArrayList.size()-1).commentedUser = (User) Role.loggedInRole;\r\n        System.out.println(\"Thanks for your oponion :)\");\r\n    }\r\n    public static void editRestaurantComment(String commentID){\r\n        int k = -1;\r\n        for (int i = 0; i < Restaurant.loggedInRestaurantForUser.restaurantCommentsArrayList.size(); i++)\r\n            if (Restaurant.loggedInRestaurantForUser.restaurantCommentsArrayList.get(i).commentID == commentID)\r\n                k = i;\r\n        if (k == -1)\r\n            System.out.println(\"Sorry, There is no comment with this ID !!!\");\r\n        else if (k != -1 && !Role.loggedInRole.equals(Restaurant.loggedInRestaurantForUser.restaurantCommentsArrayList.get(k).commentedUser))\r\n            System.out.println(\"Sorry, You can't edit this comment because it's Not yours !!!\");\r\n        else {\r\n            System.out.print(\"Please enter your new comment: \");\r\n            String newComment = scanner.nextLine();\r\n            Restaurant.loggedInRestaurantForUser.restaurantCommentsArrayList.get(k).comment = newComment;\r\n            System.out.println(\"Thanks\");\r\n        }\r\n    }\r\n    public static void getRestaurantRating (StaticArrayLists staticArrayLists){\r\n        System.out.print(\"Please enter your rating to this restaurant: (0 to 5)\");\r\n        double rating  = scanner.nextDouble();\r\n        if (rating >= 0 && rating <= 5){\r\n            System.out.println(\"Thanks for your rating :)\");\r\n            Restaurant.loggedInRestaurantForUser.restaurantRatingsArrayList.add(new Rating());\r\n            Restaurant.loggedInRestaurantForUser.restaurantRatingsArrayList.get(Restaurant.loggedInRestaurantForUser.restaurantRatingsArrayList.size()-1).rating = rating;\r\n            Restaurant.loggedInRestaurantForUser.restaurantRatingsArrayList.get(Restaurant.loggedInRestaurantForUser.restaurantRatingsArrayList.size()-1).ratingID = setID(\"rating\",staticArrayLists);\r\n            Restaurant.loggedInRestaurantForUser.restaurantRatingsArrayList.get(Restaurant.loggedInRestaurantForUser.restaurantRatingsArrayList.size()-1).ratedUser = (User) Role.loggedInRole;\r\n        } else\r\n            System.out.println(\"Sorry, You should rate from 0 to 5 !!!\");\r\n    }\r\n    public static void editRestaurantRating(String ratingID){\r\n        int k = -1;\r\n        for (int i = 0; i < Restaurant.loggedInRestaurantForUser.restaurantRatingsArrayList.size(); i++)\r\n            if (Restaurant.loggedInRestaurantForUser.restaurantRatingsArrayList.get(i).ratingID == ratingID)\r\n                k = i;\r\n        if (k == -1)\r\n            System.out.println(\"Sorry, There is no rating with this ID !!!\");\r\n        else if (k != -1 && !Role.loggedInRole.equals(Restaurant.loggedInRestaurantForUser.restaurantRatingsArrayList.get(k).ratedUser))\r\n            System.out.println(\"Sorry, You can't edit this rating because it's Not yours !!!\");\r\n        else {\r\n            System.out.print(\"Please enter your new rating: \");\r\n            double newRating = scanner.nextDouble();\r\n            Restaurant.loggedInRestaurantForUser.restaurantRatingsArrayList.get(k).rating = newRating;\r\n            System.out.println(\"Thanks\");\r\n        }\r\n    }\r\n    public static void getFoodComment(Food food,StaticArrayLists staticArrayLists){\r\n        System.out.print(\"Please enter your comment about this food \\\"\" + food.foodName + \"\\\": \");\r\n        String comment = scanner.nextLine();\r\n        food.foodCommentsArrayList.add(new Comment());\r\n        food.foodCommentsArrayList.get(food.foodCommentsArrayList.size()-1).comment = comment;\r\n        food.foodCommentsArrayList.get(food.foodCommentsArrayList.size()-1).commentID = setID(\"comment\",staticArrayLists);\r\n        food.foodCommentsArrayList.get(food.foodCommentsArrayList.size()-1).commentedUser = (User) Role.loggedInRole;\r\n        System.out.println(\"Thanks for your oponion :)\");\r\n    }\r\n    public static void editFoodComment(String commentID){\r\n        int k = -1;\r\n        for (int i = 0; i < Food.selectedFoodForUser.foodCommentsArrayList.size(); i++)\r\n            if (Food.selectedFoodForUser.foodCommentsArrayList.get(i).commentID == commentID)\r\n                k = i;\r\n        if (k == -1)\r\n            System.out.println(\"Sorry, There is no comment with this ID !!!\");\r\n        else if (k != -1 && !Role.loggedInRole.equals(Food.selectedFoodForUser.foodCommentsArrayList.get(k).commentedUser))\r\n            System.out.println(\"Sorry, You can't edit this comment because it's Not yours !!!\");\r\n        else {\r\n            System.out.print(\"Please enter your new comment: \");\r\n            String newComment = scanner.nextLine();\r\n            Food.selectedFoodForUser.foodCommentsArrayList.get(k).comment = newComment;\r\n            System.out.println(\"Thanks\");\r\n        }\r\n    }\r\n    public static void getFoodRating (StaticArrayLists staticArrayLists){\r\n        System.out.print(\"Please enter your rating to this food: (0 to 5)\");\r\n        double rating  = scanner.nextDouble();\r\n        if (rating >= 0 && rating <= 5){\r\n            System.out.println(\"Thanks for your rating :)\");\r\n            Food.selectedFoodForUser.foodRatingsArrayList.add(new Rating());\r\n            Food.selectedFoodForUser.foodRatingsArrayList.get(Food.selectedFoodForUser.foodRatingsArrayList.size()-1).rating = rating;\r\n            Food.selectedFoodForUser.foodRatingsArrayList.get(Food.selectedFoodForUser.foodRatingsArrayList.size()-1).ratingID = setID(\"rating\",staticArrayLists);\r\n            Food.selectedFoodForUser.foodRatingsArrayList.get(Food.selectedFoodForUser.foodRatingsArrayList.size()-1).ratedUser = (User) Role.loggedInRole;\r\n        } else\r\n            System.out.println(\"Sorry, You should rate from 0 to 5 !!!\");\r\n    }\r\n    public static void editFoodRating(String ratingID){\r\n        int k = -1;\r\n        for (int i = 0; i < Food.selectedFoodForUser.foodRatingsArrayList.size(); i++)\r\n            if (Food.selectedFoodForUser.foodRatingsArrayList.get(i).ratingID == ratingID)\r\n                k = i;\r\n        if (k == -1)\r\n            System.out.println(\"Sorry, There is no rating with this ID !!!\");\r\n        else if (k != -1 && !Role.loggedInRole.equals(Food.selectedFoodForUser.foodRatingsArrayList.get(k).ratedUser))\r\n            System.out.println(\"Sorry, You can't edit this rating because it's Not yours !!!\");\r\n        else {\r\n            System.out.print(\"Please enter your new rating: \");\r\n            double newRating = scanner.nextDouble();\r\n            Food.selectedFoodForUser.foodRatingsArrayList.get(k).rating = newRating;\r\n            System.out.println(\"Thanks\");\r\n        }\r\n    }\r\n    public static void showFoodComments (Food food){\r\n        if (Food.selectedFoodForUser.foodCommentsArrayList.size() == 0)\r\n            System.out.println(\"There is no comments about this food!\");\r\n        else {\r\n            System.out.println(\"Comments:\");\r\n            for (int i = 0; i < Food.selectedFoodForUser.foodCommentsArrayList.size(); i++)\r\n                System.out.println(\"\\\"\" + Food.selectedFoodForUser.foodCommentsArrayList.get(i).commentedUser.getUserName() + \"\\\" says: \\\"\" + Food.selectedFoodForUser.foodCommentsArrayList.get(i).comment + \"\\\" about this food.\");\r\n        }\r\n    }\r\n    public static void showOrdersHistory(User user){\r\n        System.out.println(\"Orders history for you:\");\r\n        for (int i = 0; i < user.userOrders.size(); i++){\r\n            System.out.print((i+1) + \"- You ordered \");\r\n            for (int j=0;j<user.userOrders.get(i).orderFoods.size();j++)\r\n                System.out.print(\"\\\"\" + user.userOrders.get(i).orderFoods.get(j).foodName + \"\\\" \");\r\n            System.out.println();\r\n        }\r\n    }\r\n    public static void selectOrder(String orderID){\r\n        int k = -1;\r\n        for (int i = 0; i < ((User)Role.loggedInRole).userCart.cartorders.size(); i++)\r\n            if (((User)Role.loggedInRole).userCart.cartorders.get(i).orderID.equals(orderID))\r\n                k = i;\r\n        if (k != -1 ) {\r\n            System.out.println(\"Order with the ID \\\"\" + orderID + \"\\\" selected!\");\r\n            int orderSize = ((User) Role.loggedInRole).userCart.cartorders.get(k).orderFoods.size();\r\n            if (orderSize != 0) {\r\n                double totalCost = 0;\r\n                System.out.println(\"Your order contains this foods:\");\r\n                for (int i = 0; i < orderSize; i++) {\r\n                    System.out.print(\"Food \\\"\" + ((User) Role.loggedInRole).userCart.cartorders.get(k).orderFoods.get(i).foodName + \"\\\" \");\r\n                    System.out.print(\"with the ID \\\"\" + ((User) Role.loggedInRole).userCart.cartorders.get(k).orderFoods.get(i).foodID + \"\\\" \");\r\n                    System.out.println(\"with the price \\\"\" + ((User) Role.loggedInRole).userCart.cartorders.get(k).orderFoods.get(i).foodCost + \"\\\"\");\r\n                    totalCost += ((User) Role.loggedInRole).userCart.cartorders.get(k).orderFoods.get(i).foodCost;\r\n                }\r\n                System.out.println(\"Total money that you should pay is \\\"\" + totalCost + \"\\\"\");\r\n            } else\r\n                System.out.println(\"You add no foods in this Order!\");\r\n        } else\r\n            System.out.println(\"There is no Order with this ID !!!\");\r\n    }\r\n    public static void showCartStatus(User user){\r\n        for (int i=0;i<user.userCart.cartorders.size();i++){\r\n            System.out.print(\"From the restaurant \\\"\" + user.userCart.cartorders.get(i).orderedRestaurant.restaurantName + \"\\\" \");\r\n            System.out.print(\"with the total cost \\\"\" + user.userCart.cartorders.get(i).getOrderCost() + \"\\\" \");\r\n            System.out.println(\"and the ID \\\"\" + user.userCart.cartorders.get(i).orderID + \"\\\".\");\r\n        }\r\n    }\r\n    public static void confirmOrder(User user, String orderID){\r\n        int k = -1;\r\n        for (int i = 0; i < user.userCart.cartorders.size(); i++)\r\n            if (user.userCart.cartorders.get(i).orderID.equals(orderID))\r\n                k = i;\r\n        if (k != -1 && user.userCart.cartorders.get(k).getOrderCost() <= user.getAccountCharge()){\r\n            user.userOrders.add(user.userCart.cartorders.get(k));\r\n            user.setAccountCharge(user.getAccountCharge() - user.userCart.cartorders.get(k).getOrderCost()) ;\r\n            user.userCart.cartorders.get(k).orderedRestaurant.restaurantOrders.add(user.userCart.cartorders.get(k)) ;\r\n            user.userCart.cartorders.get(k).orderStatus = STATUS.COOKING ;\r\n            user.userCart.cartorders.remove(k) ;\r\n            System.out.println(\"Order successfully confirmed\");\r\n        } else if (k != -1 && user.userCart.cartorders.get(k).getOrderCost() > user.getAccountCharge()){\r\n            System.out.println(\"Please charge your account first !!!\");\r\n        }\r\n        else\r\n            System.out.println(\"There is no order with this ID !!!\");\r\n    }\r\n    public static void chargeAccount(User user) {\r\n        System.out.print(\"How much would you want to charge? \");\r\n        double newCharge = scanner.nextDouble();\r\n        if (newCharge >= 0) {\r\n            System.out.println(\"Account charged successfully :)\");\r\n            user.setAccountCharge(newCharge);\r\n        }\r\n        else\r\n            System.out.println(\"Sorry, you should enter a positive value !!!\");\r\n    }\r\n    public static void showAccountCharge(User user){\r\n        System.out.println(\"You have \\\"\" + user.getAccountCharge() + \"\\\"$ in your account :)\");\r\n    }\r\n    public static void findDelivery(){\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Functions/Functions.java b/src/Functions/Functions.java
--- a/src/Functions/Functions.java	(revision 97f560c4bf71909976cdb3d5a0a3697d419f254f)
+++ b/src/Functions/Functions.java	(date 1687862842514)
@@ -3,7 +3,7 @@
 import java.io.*;
 import java.util.Scanner;
 
-public class Functions {
+public class Functions implements Serializable{
     public static Scanner scanner = new Scanner(System.in) ;
     public static void checkPassword(String password,String Role,String userName,StaticArrayLists staticArrayLists){
         boolean numberic = false ;
Index: src/Classes/STATUS.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Classes;\r\n\r\npublic enum STATUS {\r\n    COOKING,\r\n    SENT,\r\n    DELIVERED,\r\n    READYFORSENDING\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Classes/STATUS.java b/src/Classes/STATUS.java
--- a/src/Classes/STATUS.java	(revision 97f560c4bf71909976cdb3d5a0a3697d419f254f)
+++ b/src/Classes/STATUS.java	(date 1687862842888)
@@ -1,6 +1,9 @@
 package Classes;
 
-public enum STATUS {
+import java.io.Serial;
+import java.io.Serializable;
+
+public enum STATUS implements Serializable {
     COOKING,
     SENT,
     DELIVERED,
Index: src/src/Map/Graph.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package src.Map;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Enumeration;\r\nimport java.util.Hashtable;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.Scanner;\r\n\r\n/*\r\n* Node is for storing graph vertices data\r\n* T is Node name's class\r\n* Note: Node is equivalent to city in Map\r\n*/\r\n\r\nclass Node<T> {\r\n    private T name;\r\n    // cost is used in dijketsra alg: it is the cost of path from root to this Node\r\n    private Long cost;\r\n    // isVisited is used in dijkestra alg: for avoiding infinite loop in alg\r\n    private Boolean isVisited;\r\n    // parent is used in dijkestra alg: for evaluating the path, parent is the previous node \r\n    private Node<T> parent;\r\n    // neighbors holds this Node's neighbor nodes with the weight, Equivalent to neighbors edges \r\n    private Hashtable<Node<T>, Long> neighbors;\r\n\r\n    protected Node(T name) {\r\n        this.name = name;\r\n        this.neighbors = new Hashtable<>();\r\n        this.cost = Long.MAX_VALUE;          // infinity\r\n        this.isVisited = false;\r\n        this.parent = null;\r\n    }\r\n\r\n    /*\r\n    * adding a neighbor (Equivalent to edge with weight)\r\n    * neoghbor: the Node will be added as neighbor, its class has to be the same as this Node's class\r\n    * wight:    the weight between this Node and neighbor Node\r\n    * Note:     the direction of the edge is from this Node to neighbor Node ( thisNode -----> neighborNode )\r\n    * output:   flase if neighbor exists otherwise true\r\n    */\r\n    \r\n    public Boolean addNeighbor(Node<T> neighbor, Long weight) {\r\n        if(this.containsNeighbor(neighbor)) return false;\r\n        this.neighbors.put(neighbor, weight);\r\n        return true;\r\n    }\r\n\r\n    public void setCost(Long cost) {\r\n        this.cost = cost;\r\n    }\r\n\r\n    public void setParent(Node<T> parent) {\r\n        this.parent = parent;\r\n    }\r\n\r\n    public void setAsVisited() {\r\n        this.isVisited = true;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        return !(obj instanceof Node<?>) ? false : ((Node<?>) obj).getName() == this.name;\r\n    }\r\n\r\n    public T getName() {\r\n        return name;\r\n    }\r\n\r\n    public Long getCost() {\r\n        return cost;\r\n    }\r\n\r\n    public Boolean isVisited() {\r\n        return isVisited;\r\n    }\r\n\r\n    public Node<T> getParent() {\r\n        return parent;\r\n    }\r\n\r\n    public Long getWeight(Node<T> neighbor) {\r\n        if(neighbor == null) return null;\r\n        Enumeration<Node<T>> neis = neighbors.keys();\r\n        while(neis.hasMoreElements()) {\r\n            Node<?> node = neis.nextElement();\r\n            if(node.equals(neighbor)) return neighbors.get(node);\r\n        } return null;\r\n    }\r\n\r\n    public ArrayList<Node<T>> getNeighbors() {\r\n        Enumeration<Node<T>> neis = neighbors.keys();\r\n        ArrayList<Node<T>> arrayNeighbors = new ArrayList<>();\r\n        while(neis.hasMoreElements()) arrayNeighbors.add(neis.nextElement());\r\n        return arrayNeighbors;\r\n    }\r\n\r\n    public Boolean containsNeighbor(Node<T> neighbor) {\r\n        return getWeight(neighbor) == null ? false : true;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return String.valueOf(name);\r\n    }\r\n\r\n    @Override\r\n    public Node<T> clone() {\r\n        Node<T> node = new Node<>(this.name);\r\n        return node;\r\n    }\r\n}\r\n\r\n/*\r\n* Graph is for storing graph's data including vertices and edges\r\n* T is graph's nodes class\r\n* Graph is for modeling Map, Nodes is cities (or homes or ...) and Edges (or weight between nodes) is the cost of path between cities (or homes or ...)\r\n*/\r\n\r\npublic class Graph<T> {\r\n    private Integer nodeSize;\r\n    private Integer edgeSize;\r\n    private Hashtable<Node<T>, Hashtable<Node<T>, Long>> graph = null; // graph is in fact edges data but holds all data about graph\r\n    private ArrayList<Node<T>> nodes;\r\n\r\n    protected Graph(Integer nodeSize, Integer edgeSize) {\r\n        this.nodeSize = nodeSize;\r\n        this.edgeSize = edgeSize;\r\n        this.nodes = new ArrayList<>(nodeSize);\r\n    }\r\n\r\n    protected Graph(Integer nodeSize) {\r\n        this(nodeSize, Integer.MAX_VALUE);\r\n    }\r\n\r\n    protected Graph() {\r\n        this(Integer.MAX_VALUE);\r\n    }\r\n\r\n    public void updateGraph(T node, T neighborNode, Long weight) {\r\n        if(weight == null) weight = 0L;\r\n        Node<T> newNode = new Node<>(node);\r\n        Node<T> neighbor = new Node<>(neighborNode);\r\n        int indexNode = nodes.indexOf(newNode);\r\n        int indexNeighbor = nodes.indexOf(neighbor);\r\n        if(indexNode >= 0) {\r\n            if(indexNeighbor >= 0) {\r\n                nodes.get(indexNode).addNeighbor(nodes.get(indexNeighbor), weight);\r\n            } else {\r\n                nodes.get(indexNode).addNeighbor(neighbor, weight);\r\n                nodes.add(neighbor);\r\n            }\r\n        } else {\r\n            if(indexNeighbor >= 0) {\r\n                newNode.addNeighbor(nodes.get(indexNeighbor), weight);\r\n                nodes.add(newNode);\r\n            } else {\r\n                newNode.addNeighbor(neighbor, weight);\r\n                nodes.add(newNode);\r\n                nodes.add(neighbor);\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    public void updateGraph(T node, T neighborNode) {\r\n        this.updateGraph(node, neighborNode, 0L);\r\n    }\r\n\r\n    public void updateGraph(T node) {\r\n        this.updateGraph(node, null, 0L);\r\n    }\r\n\r\n    public ArrayList<Node<T>> getNodes() {\r\n        return nodes;\r\n    }\r\n\r\n    public Node<T> getNode(T node) {\r\n        int index = nodes.indexOf(new Node<T>(node));\r\n        if(index < 0) return null;\r\n        return nodes.get(index);\r\n    }\r\n\r\n    public ArrayList<T> getNodesName() {\r\n        ArrayList<T> names = new ArrayList<>();\r\n        for(Node<T> n : nodes) names.add(n.getName());\r\n        return names;\r\n    }\r\n\r\n    public Hashtable<T,Hashtable<T,Long>> getGraph() {\r\n        Hashtable<T, Hashtable<T, Long>> graph = new Hashtable<>();\r\n        for(Node<T> node : nodes) {\r\n            Hashtable<T, Long> neighbors = new Hashtable<>();\r\n            ArrayList<Node<T>> arrayNeighbors = node.getNeighbors();\r\n            for(Node<T> neighbor : arrayNeighbors) neighbors.put(neighbor.getName(), node.getWeight(neighbor));\r\n            graph.put(node.getName(), neighbors);\r\n        } return graph;\r\n    }\r\n\r\n    public Long getWeight(T node1, T node2) {\r\n        int index = nodes.indexOf(new Node<T>(node1));\r\n        if(index < 0) return null;\r\n        return nodes.get(index).getWeight(new Node<T>(node2));\r\n    }\r\n\r\n    public ArrayList<Node<T>> getNeighborNodes(T node) {\r\n        int index = nodes.indexOf(new Node<T>(node));\r\n        if(index < 0) return null;\r\n        return nodes.get(index).getNeighbors();\r\n    }\r\n\r\n    public ArrayList<T> getNeighborNames(T node) {\r\n        ArrayList<T> names = new ArrayList<>();\r\n        ArrayList<Node<T>> nodes = this.getNeighborNodes(node);\r\n        if(nodes == null) return names;\r\n        for(Node<T> n : nodes) names.add(n.getName());\r\n        return names;\r\n    }\r\n\r\n    public Integer getNodeSize() {\r\n        return this.nodeSize;\r\n    }\r\n\r\n    public static Graph readGraph(String path) {\r\n        File file = new File(path);\r\n        Scanner scanner;\r\n        try {\r\n            scanner = new Scanner(file);\r\n        } catch (FileNotFoundException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n\r\n        Integer nodeSize = scanner.hasNextInt() ? scanner.nextInt() : null;\r\n        Integer edgeSize = scanner.hasNextInt() ? scanner.nextInt() : null;\r\n        Graph<Long> graph = new Graph(nodeSize, edgeSize);\r\n\r\n        while(scanner.hasNextLong())\r\n            graph.updateGraph(scanner.nextLong(),\r\n                    scanner.hasNextLong() ? scanner.nextLong() : null,\r\n                    scanner.hasNextLong() ? scanner.nextLong() : null);\r\n\r\n        return graph;\r\n    }\r\n\r\n    @Override\r\n    public Graph clone() {\r\n        Graph<T> graph = new Graph(this.nodeSize,this.edgeSize);\r\n        for(Node<T> node : this.nodes) {\r\n            for(Node<T> neighbor : node.getNeighbors()) {\r\n                graph.updateGraph(node.getName(), neighbor.getName(), node.getWeight(neighbor));\r\n            }\r\n        } return graph;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/src/Map/Graph.java b/src/src/Map/Graph.java
--- a/src/src/Map/Graph.java	(revision 97f560c4bf71909976cdb3d5a0a3697d419f254f)
+++ b/src/src/Map/Graph.java	(date 1687862842622)
@@ -1,5 +1,6 @@
 package src.Map;
 
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Enumeration;
 import java.util.Hashtable;
@@ -13,7 +14,7 @@
 * Note: Node is equivalent to city in Map
 */
 
-class Node<T> {
+class Node<T> implements Serializable {
     private T name;
     // cost is used in dijketsra alg: it is the cost of path from root to this Node
     private Long cost;
@@ -117,7 +118,7 @@
 * Graph is for modeling Map, Nodes is cities (or homes or ...) and Edges (or weight between nodes) is the cost of path between cities (or homes or ...)
 */
 
-public class Graph<T> {
+public class Graph<T> implements Serializable{
     private Integer nodeSize;
     private Integer edgeSize;
     private Hashtable<Node<T>, Hashtable<Node<T>, Long>> graph = null; // graph is in fact edges data but holds all data about graph
Index: src/Classes/Role.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Classes;\r\n\r\npublic class Role {\r\n    public static Role loggedInRole ;\r\n    public static boolean loggedInRoleExistance = false ;\r\n    private String securityQuestionAnswer ;\r\n    public String securityQuestion ;\r\n\r\n    public String getSecurityQuestionAnswer() {\r\n        return securityQuestionAnswer;\r\n    }\r\n\r\n    public void setSecurityQuestionAnswer(String securityQuestionAnswer) {\r\n        this.securityQuestionAnswer = securityQuestionAnswer;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Classes/Role.java b/src/Classes/Role.java
--- a/src/Classes/Role.java	(revision 97f560c4bf71909976cdb3d5a0a3697d419f254f)
+++ b/src/Classes/Role.java	(date 1687862842763)
@@ -1,6 +1,8 @@
 package Classes;
 
-public class Role {
+import java.io.Serializable;
+
+public class Role implements Serializable {
     public static Role loggedInRole ;
     public static boolean loggedInRoleExistance = false ;
     private String securityQuestionAnswer ;
Index: src/src/Map/Dijkstra.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package src.Map;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Dijkstra<T> {\r\n    private Graph<T> graph;\r\n    private Node<T> target, root;\r\n    private ArrayList<Node<T>> path = null;\r\n    private Long cost = null;\r\n\r\n    public Dijkstra(Graph<T> graph) {\r\n        this.graph = graph;\r\n    }\r\n\r\n    public Boolean search(T root, T target) {\r\n        Graph<T> graph = this.graph.clone();\r\n\r\n        this.root = graph.getNode(root);\r\n        this.target = graph.getNode(target);\r\n        ArrayList<Node<T>> neighbors = this.root.getNeighbors();\r\n        for(Node<T> neighbor : neighbors) {\r\n            neighbor.setCost(this.root.getWeight(neighbor));\r\n            neighbor.setParent(this.root);\r\n        } this.root.setCost(null);\r\n\r\n        Node<T> node = findLowestCostNode(graph);\r\n        while(node != null) {\r\n            Long cost = node.getCost();\r\n            neighbors = node.getNeighbors();\r\n            for(Node<T> neighbor : neighbors) {\r\n                Long newCost = cost + node.getWeight(neighbor);\r\n                if(newCost < neighbor.getCost()) {\r\n                    neighbor.setCost(newCost);\r\n                    neighbor.setParent(node);\r\n                }\r\n            } node.setAsVisited();\r\n            node = findLowestCostNode(graph);\r\n        } if(this.target.getCost() != Long.MAX_VALUE) calcPathAndCost();\r\n\r\n        return (this.target.getCost() != Long.MAX_VALUE);\r\n    }\r\n\r\n    private Node<T> findLowestCostNode(Graph graph) {\r\n        Long lowestCost = Long.MAX_VALUE;\r\n        Node<T> lowestCostNode = null;\r\n        ArrayList<Node<T>> nodes = graph.getNodes();\r\n        for(Node<T> node : nodes) {\r\n            if(!node.isVisited() && !node.equals(root)) {\r\n                if(node.getCost() < lowestCost) {\r\n                    lowestCost = node.getCost();\r\n                    lowestCostNode = node;\r\n                }\r\n            }\r\n        } return lowestCost == Long.MAX_VALUE ? null : lowestCostNode;\r\n    }\r\n\r\n    private void calcPathAndCost() {\r\n        ArrayList<Node<T>> path = new ArrayList<>();\r\n        Long cost = 0L;\r\n        Node<T> node = target;\r\n        while(node != null) {\r\n            Node<T> parent = node.getParent();\r\n            path.add(node);\r\n            if(parent != null) cost += parent.getWeight(node);\r\n            node = parent;\r\n        }\r\n        this.path = path;\r\n        this.cost = cost;\r\n    }\r\n\r\n    public ArrayList<Node<T>> getPath() {\r\n        return path;\r\n    }\r\n\r\n    public Long getCost() {\r\n        return cost;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/src/Map/Dijkstra.java b/src/src/Map/Dijkstra.java
--- a/src/src/Map/Dijkstra.java	(revision 97f560c4bf71909976cdb3d5a0a3697d419f254f)
+++ b/src/src/Map/Dijkstra.java	(date 1687862842665)
@@ -1,8 +1,9 @@
 package src.Map;
 
+import java.io.Serializable;
 import java.util.ArrayList;
 
-public class Dijkstra<T> {
+public class Dijkstra<T> implements Serializable {
     private Graph<T> graph;
     private Node<T> target, root;
     private ArrayList<Node<T>> path = null;
Index: src/Classes/Cart.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Classes;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Cart {\r\n    public ArrayList<Order> cartorders = new ArrayList<Order>();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Classes/Cart.java b/src/Classes/Cart.java
--- a/src/Classes/Cart.java	(revision 97f560c4bf71909976cdb3d5a0a3697d419f254f)
+++ b/src/Classes/Cart.java	(date 1687862842830)
@@ -1,7 +1,8 @@
 package Classes;
 
+import java.io.Serializable;
 import java.util.ArrayList;
 
-public class Cart {
+public class Cart implements Serializable {
     public ArrayList<Order> cartorders = new ArrayList<Order>();
 }
